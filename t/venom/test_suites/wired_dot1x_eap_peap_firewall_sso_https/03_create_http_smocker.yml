name: Create smocker HTTP mock
testcases:
- name: create_smocker_dir
  steps:
    - type: exec
      script: "mkdir -p {{.smocker_dir}}"
      vars:
        temp_dir:
          from: result.systemout

- name: download_smocker
  steps:
  - type: exec
    script: |
      wget -P {{.smocker_dir}} https://github.com/Thiht/smocker/releases/latest/download/smocker.tar.gz

- name: untar_smocker
  steps:
  - type: exec
    script: |
      tar -C {{.smocker_dir}} -xf {{.smocker_dir}}/smocker.tar.gz

- name: create_smocker_wrapper
  steps:
  - type: exec
    script: |
      cat << EOF | sed -e 's/^[ \t]*//' >> {{.smocker_dir}}/smocker_wrapper.sh
        #!/bin/bash
        sudo touch /opt/smocker/smocker.out
        sudo chmod a+w /opt/smocker/smocker.out
        nohup {{.smocker_dir}}/smocker -static-files="{{.smocker_dir}}" -persistence-directory="{{.smocker_dir}}" -mock-server-listen-port={{.firewall_sso.firewall.port}} -config-listen-port={{.firewall_sso.firewall.port_config}} -log-level="debug" > /opt/smocker/smocker.out 2>&1 &
      EOF

- name: run_smocker
  steps:
  - type: exec
    script: |
      bash {{.smocker_dir}}/smocker_wrapper.sh

- name: check_smocker_running
  steps:
  - type: http
    method: GET
    url: 'http://{{.firewall_sso.firewall.host}}:{{.firewall_sso.firewall.port_config}}/version'
    headers:
      "Content-Type": "application/json"
    assertions:
      - result.bodyjson.app_name ShouldEqual smocker

- name: configure_smocker
  steps:
  - type: exec
    script: |
      curl -XPOST --header "Content-Type: application/x-yaml" --data-binary "@mocks/firewall-sso-https.yml" {{.firewall_sso.firewall.host}}:{{.firewall_sso.firewall.port_config}}/mocks

- name: check_smocker_config
  steps:
  - type: http
    method: GET
    url: 'http://{{.firewall_sso.firewall.host}}:{{.firewall_sso.firewall.port}}/test'
    headers:
      "Content-Type": "application/json"
    assertions:
      - result.bodyjson ShouldEqual true
